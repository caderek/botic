import { UiohookKey } from "uiohook-napi";
import { Key } from "@nut-tree/nut-js";

export enum MouseButton {
  ANY = -1,
  NONE,
  LEFT,
  RIGHT,
  MIDDLE,
}

export enum VerticalScroll {
  UP = -1,
  DOWN = 1,
}

export enum HorizontalScroll {
  LEFT = -1,
  RIGHT = 1,
}

export enum KeyboardEventType {
  KEY_PRESSED = 4,
  KEY_RELEASED = 5,
}

export enum MouseEventType {
  MOUSE_CLICKED = 6,
  MOUSE_PRESSED = 7,
  MOUSE_RELEASED = 8,
  MOUSE_MOVED = 9,
}

export enum WheelEventType {
  MOUSE_SCROLL = 11,
}

export enum InputEventType {
  KEY_PRESSED = 4,
  KEY_RELEASED = 5,
  MOUSE_CLICKED = 6,
  MOUSE_PRESSED = 7,
  MOUSE_RELEASED = 8,
  MOUSE_MOVED = 9,
  MOUSE_SCROLL = 11,
}

export const KeycodeByName = UiohookKey;

export const KeysNames = new Map(
  Object.entries(UiohookKey).map(([key, code]) => [code, key])
) as Map<number, keyof typeof UiohookKey>;

export const RegularKeys = {
  "0": Key.Num0,
  "1": Key.Num1,
  "2": Key.Num2,
  "3": Key.Num3,
  "4": Key.Num4,
  "5": Key.Num5,
  "6": Key.Num6,
  "7": Key.Num7,
  "8": Key.Num8,
  "9": Key.Num9,
  a: Key.A,
  b: Key.B,
  c: Key.C,
  d: Key.D,
  e: Key.E,
  f: Key.F,
  g: Key.G,
  h: Key.H,
  i: Key.I,
  j: Key.J,
  k: Key.K,
  l: Key.L,
  m: Key.M,
  n: Key.N,
  o: Key.O,
  p: Key.P,
  q: Key.Q,
  r: Key.R,
  s: Key.S,
  t: Key.T,
  u: Key.U,
  v: Key.V,
  w: Key.W,
  x: Key.X,
  y: Key.Y,
  z: Key.Z,
  "`": Key.Grave,
  "-": Key.Minus,
  "=": Key.Equal,
  "[": Key.LeftBracket,
  "]": Key.RightBracket,
  "\\": Key.Backslash,
  ";": Key.Semicolon,
  "'": Key.Quote,
  ",": Key.Comma,
  ".": Key.Period,
  "/": Key.Slash,
  " ": Key.Space,
  "\t": Key.Tab,
  "\n": Key.Return,
};

export const ShiftedKeys = {
  ")": Key.Num0,
  "!": Key.Num1,
  "@": Key.Num2,
  "#": Key.Num3,
  $: Key.Num4,
  "%": Key.Num5,
  "^": Key.Num6,
  "&": Key.Num7,
  "*": Key.Num8,
  "(": Key.Num9,
  A: Key.A,
  B: Key.B,
  C: Key.C,
  D: Key.D,
  E: Key.E,
  F: Key.F,
  G: Key.G,
  H: Key.H,
  I: Key.I,
  J: Key.J,
  K: Key.K,
  L: Key.L,
  M: Key.M,
  N: Key.N,
  O: Key.O,
  P: Key.P,
  Q: Key.Q,
  R: Key.R,
  S: Key.S,
  T: Key.T,
  U: Key.U,
  V: Key.V,
  W: Key.W,
  X: Key.X,
  Y: Key.Y,
  Z: Key.Z,
  "~": Key.Grave,
  _: Key.Minus,
  "+": Key.Equal,
  "{": Key.LeftBracket,
  "}": Key.RightBracket,
  "|": Key.Backslash,
  ":": Key.Semicolon,
  '"': Key.Quote,
  "<": Key.Comma,
  ">": Key.Period,
  "?": Key.Slash,
};

// export const RegularKeys = {
//   "0": UiohookKey[0],
//   "1": UiohookKey[1],
//   "2": UiohookKey[2],
//   "3": UiohookKey[3],
//   "4": UiohookKey[4],
//   "5": UiohookKey[5],
//   "6": UiohookKey[6],
//   "7": UiohookKey[7],
//   "8": UiohookKey[8],
//   "9": UiohookKey[9],
//   a: UiohookKey.A,
//   b: UiohookKey.B,
//   c: UiohookKey.C,
//   d: UiohookKey.D,
//   e: UiohookKey.E,
//   f: UiohookKey.F,
//   g: UiohookKey.G,
//   h: UiohookKey.H,
//   i: UiohookKey.I,
//   j: UiohookKey.J,
//   k: UiohookKey.K,
//   l: UiohookKey.L,
//   m: UiohookKey.M,
//   n: UiohookKey.N,
//   o: UiohookKey.O,
//   p: UiohookKey.P,
//   q: UiohookKey.Q,
//   r: UiohookKey.R,
//   s: UiohookKey.S,
//   t: UiohookKey.T,
//   u: UiohookKey.U,
//   v: UiohookKey.V,
//   w: UiohookKey.W,
//   x: UiohookKey.X,
//   y: UiohookKey.Y,
//   z: UiohookKey.Z,
//   "`": UiohookKey.Backquote,
//   "-": UiohookKey.Minus,
//   "=": UiohookKey.Equal,
//   "[": UiohookKey.BracketLeft,
//   "]": UiohookKey.BracketRight,
//   "\\": UiohookKey.Backslash,
//   ";": UiohookKey.Semicolon,
//   "'": UiohookKey.Quote,
//   ",": UiohookKey.Comma,
//   ".": UiohookKey.Period,
//   "/": UiohookKey.Slash,
//   " ": UiohookKey.Space,
//   "\t": UiohookKey.Tab,
//   "\n": UiohookKey.Enter,
// };

// export const ShiftedKeys = {
//   ")": UiohookKey[0],
//   "!": UiohookKey[1],
//   "@": UiohookKey[2],
//   "#": UiohookKey[3],
//   $: UiohookKey[4],
//   "%": UiohookKey[5],
//   "^": UiohookKey[6],
//   "&": UiohookKey[7],
//   "*": UiohookKey[8],
//   "(": UiohookKey[9],
//   A: UiohookKey.A,
//   B: UiohookKey.B,
//   C: UiohookKey.C,
//   D: UiohookKey.D,
//   E: UiohookKey.E,
//   F: UiohookKey.F,
//   G: UiohookKey.G,
//   H: UiohookKey.H,
//   I: UiohookKey.I,
//   J: UiohookKey.J,
//   K: UiohookKey.K,
//   L: UiohookKey.L,
//   M: UiohookKey.M,
//   N: UiohookKey.N,
//   O: UiohookKey.O,
//   P: UiohookKey.P,
//   Q: UiohookKey.Q,
//   R: UiohookKey.R,
//   S: UiohookKey.S,
//   T: UiohookKey.T,
//   U: UiohookKey.U,
//   V: UiohookKey.V,
//   W: UiohookKey.W,
//   X: UiohookKey.X,
//   Y: UiohookKey.Y,
//   Z: UiohookKey.Z,
//   "~": UiohookKey.Backquote,
//   _: UiohookKey.Minus,
//   "+": UiohookKey.Equal,
//   "{": UiohookKey.BracketLeft,
//   "}": UiohookKey.BracketRight,
//   "|": UiohookKey.Backslash,
//   ":": UiohookKey.Semicolon,
//   '"': UiohookKey.Quote,
//   "<": UiohookKey.Comma,
//   ">": UiohookKey.Period,
//   "?": UiohookKey.Slash,
// };
